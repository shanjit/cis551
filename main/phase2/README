CIS551
======
Contributors:
  Nachiket Nanadikar,
  Ameya More,
  Shanjit Singh Jajmann


FILE INCLUDED:
==============
makefile
demo.mk
server_demo.c
client_demo.c
defs.h
file (This is the database file, it must be present on the drone before server can be run)
start.sh



OBJECTIVE
=========
The goal of this homework was to:
[1] Implement a client server application that would allow the client to 
    execute shell commands on the server.
[2] Set up an encrypted connection between the client and the server.
[3] Provide means to add, delete users and allow authenticated users to update 
    password.
[4] Allow an authenticated user to couple/decouple MAC addresses using iptables.
[5] Prevent user from sending a shell code over to carry out buffer overflow
    attacks prior to authentication.

HOW THESE FEATURES ARE IMPLEMENTED
==================================
[1] The UI:
    When the client application runs, the first thing the user must do is authenticate
    himself with his username and password. The format used to enter the username and
    password is:
		<username>,<password>
    After authentcation, the user gets a prompt. The user can then enter various commands
    to use the different features

    To add a new user, the user can enter the following:
		<username>,<password>

    To add a new MAC address to allow connections the user can enter the following:
		<MAC address>;<port number>

    To remove a MAC coupling from the drone:
		<MAC address>#<port number>

    To execute a shell command the user can simply type in the shell command instead of typing in
    any of the above commands in the command line interface provided at the client


[2] Encryption:
    All communication between the client and the server is encrypted using Caesar's cipher
    by adding 7 to the ASCII value of the characters. Decryption is analogously carried out
    by subtracting 7 from the received data.

[3] Checking for shell code:
    This check has been added before authentication. If while authenticating, the user enters a 
    username or password that contains a shellcode then the authentication process fails and the 
    client is killed by the user

[4] MAC bindings:
    MAC address bindings are maintained by using iptables. When the user enters an allowed MAC address
    a rule is added to allow that MAC address to connect to the drone. Analogously, when the user
    deletes a MAC address the rule is reomoved thereby rejecting any connections from that MAC 
    address

[5] Shell access:
    The shell access has been implemented using the system() system call. Any authenticated user
    can enter shell commands which will be executed on the drone and the results will be
    displayed to the client. Basic commands like ls, cat and pwd have been tested.

HOW TO COMPILE THE CODE BASE
============================
    A makefile has been provided in the submission
    Running the following command
		make all
    will compile the files and create 2 output files drone_server and client_demo
    The drone_server needs to be transferred to the drone using FTP. In the same directory where
    drone_server has been copied on the drone, there must be a database file named 'file' present.
    This file contains the usernames and passwords for all users. A sample file has been provided

HOW TO RUN THE APPLICATIONS:
===========================
    The submission has a script called start.sh
    This script must be invoked to execute the server on the drone. This script ensures that the 
    server is always running. Even if due to some reason, the server crashes, it will be restarted
    automatically by the script

    The client can be run using:
		./client_demo <ip_address_of_server>


How does the communication work ?
+++++++++++++++++++++++++++++

Pre-reading
===========
1. http://www.cplusplus.com/reference/cstdio/fputs/ 
2. http://www.cplusplus.com/reference/cstdio/fgets/
3. http://www.cplusplus.com/reference/cstdio/fflush/
4. https://www.cs.bu.edu/teaching/c/file-io/intro/
5. Why use fprintf and not fputs - http://stackoverflow.com/questions/5690979/fputs-vs-fprintf


Basic idea 
==========
Two main ideas

1. Tying up a socket file descriptor with a file pointer using fdopen. 
Eg. server_request = fdopen( sockfd, "w" ); or
	server_reply = fdopen( sockfd, "r" );

2.
Write C strings to a file stream using fputs
Read C strings from a file stream using fgets

The file stream getting the input from the user is the STDIN.
The file stream printing the output to the user is the STDOUT. 

Be sure to use fflush to print out unformatted strings.
Client side 
------------
The file stream printing to the socket => server_request
The file stream reading from the socket => server_reply

Server side 
------------
The file stream printing to the socket => client
The file stream reading from the socket => client


Client side
===========
//
//
// Anything sent to the server is server_request
// Anything got from the server is the server_reply
//
//

Input
-----
Read from the STDIN (file stream) into the buffer send_buf using fgets. 
Write the send_buf (C string) to the server_request (file stream) using fputs. 
fflush(server_request) to send it to the server

Output
------
Read from the server_reply (file stream) into the buffer recv_buf using fgets.
Write the recv_buf (C string) to the STDOUT (user screen) using fprintf. (why not fputs ? See prereading)


Server side
===========
//
// Anything sent to the client is the client_reply
// Anything got from the client is the client_request
//

Service Input from Client
-------------------------
1. fgets the client_request (file stream) into a buffer. fgets( buf, BUFSIZE, client_request)

2. Use sscanf to take out the string from the buf using a pointer pointed by find_comma, find_equals or find_dollar. This is to find out if he wants to send username, password or add/delete a new username password.

3. Using <name,user> to add or <name$user> to delete.

4. Make a return string and put the string into the file stream client_reply. fflush the stream. 

Send data back to the client
----------------------------
fputs the string into the client_reply file stream and then fflush.

